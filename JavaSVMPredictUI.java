/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package javasvmpredictui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
// add for prediction
import javasvmpredict.*;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ritesh
 */
public class JavaSVMPredictUI extends javax.swing.JFrame implements MouseListener {

    /**
     * Creates new form NewJFrame
     */
    // user initiated variables
    JFileChooser fileChooser;
    SVM s;
    Problem test;
    double pred[];
    ArrayList<JCheckBox> checkboxes;
    ArrayList<JCheckBox> checkboxes1;
    ArrayList<JCheckBox> checkboxes2;
    ArrayList<String> peptideHits;

    public JavaSVMPredictUI() {
        initComponents();
        /* Motif application not developed 
        
         // read the cache file for peptide strings
         String filename  = "tetrapos.txt" ;
         peptideHits = new ArrayList<>();
        
         try {
         peptideHits = readCacheFile(filename);
         } catch (IOException ex) {
         Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
         }
        
         */

        fileChooser = new JFileChooser();

        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        jTextArea1.addMouseListener(new ContextMenuMouseListener());
        jTextField1.addMouseListener(new ContextMenuMouseListener());
        jTextField2.addMouseListener(new ContextMenuMouseListener());

        jTextField1.setUI(new HintTextFieldUI("Input Protein Sequence ", true, new Color(100, 100, 100)));
        jTestTextField1.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));
        jTextField2.setUI(new HintTextFieldUI("Input Protein Sequence ", true, new Color(100, 100, 100)));
        jTestTextField2.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));
        jTestTextField.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));

        checkboxes = new ArrayList<>();
        checkboxes1 = new ArrayList<>();
        checkboxes2 = new ArrayList<>();
        addCheckboxes();

        comboBoxsetThresholdValues(jComboBoxThreshold);
        comboBoxsetThresholdValues(jComboBoxThreshold1);
        comboBoxsetThresholdValues(jComboBoxThreshold2);
        comboBoxsetWindowSize(jComboBoxWindowsz);

    }
    /* Motif application not developed 
     private ArrayList<String> readCacheFile(String filename) throws IOException {
     ArrayList<String> lines = new ArrayList<>();
     BufferedReader biy = null;
     String pept;
     try {
     biy = new BufferedReader(new FileReader(filename));
     } catch (FileNotFoundException ex) {
     Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
     }
     while ((pept = biy.readLine()) != null) {
     lines.add(pept);
     }
     return lines;
     }
     /* Motif application not developed 
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane3 = new javax.swing.JTabbedPane();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel8 = new javax.swing.JPanel();
        jButtonPredict1 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButtonTest1 = new javax.swing.JButton();
        jTestTextField1 = new javax.swing.JTextField();
        jButtonModel1 = new javax.swing.JButton();
        jModelTextField1 = new javax.swing.JTextField();
        jButtonOutput1 = new javax.swing.JButton();
        jOutputTextField1 = new javax.swing.JTextField();
        jCheckBoxPaste1 = new javax.swing.JCheckBox();
        jComboBoxJavaver1 = new javax.swing.JComboBox();
        jComboBoxThreshold1 = new javax.swing.JComboBox();
        jTextField1 = new javax.swing.JTextField();
        jButtonExample1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldStatus1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jCheckBoxHydroPhob1 = new javax.swing.JCheckBox();
        jCheckBoxStericHind1 = new javax.swing.JCheckBox();
        jCheckBoxcharge1 = new javax.swing.JCheckBox();
        jCheckBoxNetHydrogen1 = new javax.swing.JCheckBox();
        jCheckBoxMW1 = new javax.swing.JCheckBox();
        jCheckBoxhydroPathicity1 = new javax.swing.JCheckBox();
        jCheckBoxSideBulk1 = new javax.swing.JCheckBox();
        jCheckBoxpI1 = new javax.swing.JCheckBox();
        jCheckBoxamphiPathicity1 = new javax.swing.JCheckBox();
        jCheckBoxhydrophilicity1 = new javax.swing.JCheckBox();
        jCheckBoxAllProp1 = new javax.swing.JCheckBox();
        jCheckBoxReset1 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jButtonPredict = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButtonTest = new javax.swing.JButton();
        jTestTextField = new javax.swing.JTextField();
        jButtonModel = new javax.swing.JButton();
        jModelTextField = new javax.swing.JTextField();
        jButtonOutput = new javax.swing.JButton();
        jOutputTextField = new javax.swing.JTextField();
        jCheckBoxPaste = new javax.swing.JCheckBox();
        jComboBoxJavaver = new javax.swing.JComboBox();
        jComboBoxThreshold = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonExample = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldStatus = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jCheckBoxHydroPhob = new javax.swing.JCheckBox();
        jCheckBoxStericHind = new javax.swing.JCheckBox();
        jCheckBoxcharge = new javax.swing.JCheckBox();
        jCheckBoxNetHydrogen = new javax.swing.JCheckBox();
        jCheckBoxMW = new javax.swing.JCheckBox();
        jCheckBoxhydroPathicity = new javax.swing.JCheckBox();
        jCheckBoxSideBulk = new javax.swing.JCheckBox();
        jCheckBoxpI = new javax.swing.JCheckBox();
        jCheckBoxamphiPathicity = new javax.swing.JCheckBox();
        jCheckBoxhydrophilicity = new javax.swing.JCheckBox();
        jCheckBoxAllProp = new javax.swing.JCheckBox();
        jCheckBoxReset = new javax.swing.JCheckBox();
        jPanel10 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jButtonTest2 = new javax.swing.JButton();
        jTestTextField2 = new javax.swing.JTextField();
        jButtonModel2 = new javax.swing.JButton();
        jModelTextField2 = new javax.swing.JTextField();
        jButtonOutput2 = new javax.swing.JButton();
        jOutputTextField2 = new javax.swing.JTextField();
        jCheckBoxPaste2 = new javax.swing.JCheckBox();
        jComboBoxJavaver2 = new javax.swing.JComboBox();
        jComboBoxThreshold2 = new javax.swing.JComboBox();
        jTextField2 = new javax.swing.JTextField();
        jComboBoxWindowsz = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jButtonExample2 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jButtonPredict2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldStatus2 = new javax.swing.JTextField();
        jPanel15 = new javax.swing.JPanel();
        jCheckBoxHydroPhob2 = new javax.swing.JCheckBox();
        jCheckBoxStericHind2 = new javax.swing.JCheckBox();
        jCheckBoxcharge2 = new javax.swing.JCheckBox();
        jCheckBoxNetHydrogen2 = new javax.swing.JCheckBox();
        jCheckBoxMW2 = new javax.swing.JCheckBox();
        jCheckBoxhydroPathicity2 = new javax.swing.JCheckBox();
        jCheckBoxSideBulk2 = new javax.swing.JCheckBox();
        jCheckBoxpI2 = new javax.swing.JCheckBox();
        jCheckBoxamphiPathicity2 = new javax.swing.JCheckBox();
        jCheckBoxhydrophilicity2 = new javax.swing.JCheckBox();
        jCheckBoxAllProp2 = new javax.swing.JCheckBox();
        jCheckBoxReset2 = new javax.swing.JCheckBox();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea4 = new javax.swing.JTextArea();

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 692, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 430, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("tab1", jPanel6);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(1155, 1155, 1155)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("HemoPI");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setLocationByPlatform(true);
        setResizable(false);

        jPanel7.setBackground(new java.awt.Color(204, 204, 255));

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 204, 255));
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jTextArea2.setRows(5);
        jTextArea2.setText("HemoPI is an in silico method to predict hemolytic property of peptide. It also allows \nusers to design better therapeutic peptide analog with desirable hemolytic potencies.\nMain Modules of HemoPI Standalone version:\n\n(A) Hemolytic Potency: This tool is helpful to users to predict whether a peptide is \nhemolytic or not. In addtion, it also allows user to generate all possible single mutant\nanalogs of their peptides and predict whether that analog is hemolytic or not.\nThus in this way, it is helpful for predicting, as well as designing peptides with desirable\nhemolytic potency.\n\n(B) Virtual Screening: This module allows user to screen and predict hemolytic peptides\nfrom large number of submitted peptides. This tool allows the users to identify highly\nhemolytic or non-hemolytic peptides from large number peptides (in a batch mode) \nsubmitted by a user.\n\n(C) Protein Mapping:  This module assists users to identify potential hemolytic regions\n in a given protein sequence. It generates all possible overlapping peptides of a protein\n sequence and their single mutant analogs followed by prediction of their hemolytic\nproperty.");
        jTextArea2.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Home", jPanel7);

        jPanel8.setBackground(new java.awt.Color(204, 204, 255));
        jPanel8.setBorder(new javax.swing.border.MatteBorder(null));

        jButtonPredict1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonPredict1.setText("Predict");
        jButtonPredict1.setToolTipText("Predict the output");
        jButtonPredict1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredict1ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(204, 204, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "SVM Inputs"));

        jButtonTest1.setText("TestFile");
        jButtonTest1.setToolTipText("Select a test file for prediction");
        jButtonTest1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTest1ActionPerformed(evt);
            }
        });

        jTestTextField1.setEditable(false);
        jTestTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTestTextField1ActionPerformed(evt);
            }
        });

        jButtonModel1.setText("ModelFile");
        jButtonModel1.setToolTipText("Select a Model File");
        jButtonModel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModel1ActionPerformed(evt);
            }
        });

        jModelTextField1.setEditable(false);
        jModelTextField1.setToolTipText("Name of Model File");
        jModelTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModelTextField1ActionPerformed(evt);
            }
        });

        jButtonOutput1.setText("OutputFile");
        jButtonOutput1.setToolTipText("Select an output file where to save");
        jButtonOutput1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutput1ActionPerformed(evt);
            }
        });

        jOutputTextField1.setEditable(false);
        jOutputTextField1.setToolTipText("Name of Output File");
        jOutputTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputTextField1ActionPerformed(evt);
            }
        });

        jCheckBoxPaste1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxPaste1.setText("Paste/Write Test file ");
        jCheckBoxPaste1.setToolTipText("Check if you want to paste or write test file yourself");
        jCheckBoxPaste1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPaste1ActionPerformed(evt);
            }
        });

        jComboBoxJavaver1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "SvmLight 5.0", "SvmLight 6.01", "SvmLight 6.02", "LIBsvm" }));
        jComboBoxJavaver1.setToolTipText("Choose if you want to automatically detect model file or want to indicate ");
        jComboBoxJavaver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxJavaver1ActionPerformed(evt);
            }
        });

        jComboBoxThreshold1.setBackground(new java.awt.Color(204, 204, 255));
        jComboBoxThreshold1.setForeground(new java.awt.Color(204, 204, 255));
        jComboBoxThreshold1.setToolTipText("");
        jComboBoxThreshold1.setEnabled(false);
        jComboBoxThreshold1.setPreferredSize(new java.awt.Dimension(0, 0));
        jComboBoxThreshold1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThreshold1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);

        jButtonExample1.setText("Example");
        jButtonExample1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExample1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jButtonOutput1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jOutputTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxThreshold1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jButtonTest1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTestTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jButtonModel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jModelTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxJavaver1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxPaste1)
                    .addComponent(jButtonExample1))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPaste1))
                .addGap(28, 28, 28)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTest1)
                    .addComponent(jTestTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExample1))
                .addGap(16, 16, 16)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonModel1)
                    .addComponent(jModelTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxJavaver1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOutput1)
                    .addComponent(jOutputTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxThreshold1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 13, Short.MAX_VALUE))
        );

        jTextField1.getAccessibleContext().setAccessibleName("");

        jLabel3.setText("Status Message");

        jTextFieldStatus1.setEditable(false);
        jTextFieldStatus1.setBackground(new java.awt.Color(204, 204, 255));
        jTextFieldStatus1.setBorder(null);
        jTextFieldStatus1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStatus1ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel4.setText("HemoPI Software(Analog Mode)");

        jPanel13.setBackground(new java.awt.Color(204, 204, 255));
        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Physico-Chemical Properties"));
        jPanel13.setToolTipText("Select Physicochemical Properties");

        jCheckBoxHydroPhob1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxHydroPhob1.setText("Hydrophobicity");
        jCheckBoxHydroPhob1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHydroPhob1ActionPerformed(evt);
            }
        });

        jCheckBoxStericHind1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxStericHind1.setSelected(true);
        jCheckBoxStericHind1.setText("Steric hinderance");

        jCheckBoxcharge1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxcharge1.setText("Charge");

        jCheckBoxNetHydrogen1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxNetHydrogen1.setSelected(true);
        jCheckBoxNetHydrogen1.setText("Net Hydrogen");

        jCheckBoxMW1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxMW1.setSelected(true);
        jCheckBoxMW1.setText("Molecular weight");

        jCheckBoxhydroPathicity1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydroPathicity1.setText("Hydropathicity");

        jCheckBoxSideBulk1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxSideBulk1.setText("Solvation");
        jCheckBoxSideBulk1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSideBulk1ActionPerformed(evt);
            }
        });

        jCheckBoxpI1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxpI1.setText("pI");

        jCheckBoxamphiPathicity1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxamphiPathicity1.setText("Amphipathicity");

        jCheckBoxhydrophilicity1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydrophilicity1.setText("Hydrophilicity");

        jCheckBoxAllProp1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxAllProp1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxAllProp1.setText("All");
        jCheckBoxAllProp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllProp1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxHydroPhob1)
                    .addComponent(jCheckBoxNetHydrogen1))
                .addGap(27, 27, 27)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxcharge1)
                    .addComponent(jCheckBoxStericHind1))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxSideBulk1)
                    .addComponent(jCheckBoxpI1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxhydroPathicity1)
                    .addComponent(jCheckBoxhydrophilicity1))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxamphiPathicity1)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jCheckBoxMW1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxAllProp1)))
                .addGap(14, 14, 14))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxHydroPhob1)
                    .addComponent(jCheckBoxStericHind1)
                    .addComponent(jCheckBoxhydroPathicity1)
                    .addComponent(jCheckBoxamphiPathicity1)
                    .addComponent(jCheckBoxSideBulk1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNetHydrogen1)
                    .addComponent(jCheckBoxcharge1)
                    .addComponent(jCheckBoxpI1)
                    .addComponent(jCheckBoxMW1)
                    .addComponent(jCheckBoxhydrophilicity1)
                    .addComponent(jCheckBoxAllProp1))
                .addGap(17, 17, 17))
        );

        jCheckBoxReset1.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxReset1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxReset1.setText("Reset");
        jCheckBoxReset1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxReset1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextFieldStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                            .addGap(262, 262, 262)
                            .addComponent(jButtonPredict1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxReset1))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createSequentialGroup()
                            .addGap(160, 160, 160)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPredict1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxReset1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStatus1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(10, 10, 10))
        );

        jTabbedPane2.addTab("Hemolytic Potency", jPanel8);

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));
        jPanel1.setName("Controls"); // NOI18N

        jButtonPredict.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonPredict.setText("Predict");
        jButtonPredict.setToolTipText("Predict the output");
        jButtonPredict.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredictActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("HemoPI Software(Batch Mode)");

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "SVM Inputs"));

        jButtonTest.setText("TestFile");
        jButtonTest.setToolTipText("Select a test file for prediction");
        jButtonTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestActionPerformed(evt);
            }
        });

        jTestTextField.setEditable(false);
        jTestTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTestTextFieldActionPerformed(evt);
            }
        });

        jButtonModel.setText("ModelFile");
        jButtonModel.setToolTipText("Select a Model File");
        jButtonModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModelActionPerformed(evt);
            }
        });

        jModelTextField.setEditable(false);
        jModelTextField.setToolTipText("Name of Model File");
        jModelTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModelTextFieldActionPerformed(evt);
            }
        });

        jButtonOutput.setText("OutputFile");
        jButtonOutput.setToolTipText("Select an output file where to save");
        jButtonOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutputActionPerformed(evt);
            }
        });

        jOutputTextField.setEditable(false);
        jOutputTextField.setToolTipText("Name of Output File");
        jOutputTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputTextFieldActionPerformed(evt);
            }
        });

        jCheckBoxPaste.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxPaste.setText("Paste/Write Test file ");
        jCheckBoxPaste.setToolTipText("Check if you want to paste or write test file yourself");
        jCheckBoxPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPasteActionPerformed(evt);
            }
        });

        jComboBoxJavaver.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "SvmLight 5.0", "SvmLight 6.01", "SvmLight 6.02", "LIBsvm" }));
        jComboBoxJavaver.setToolTipText("Choose if you want to automatically detect model file or want to indicate ");
        jComboBoxJavaver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxJavaverActionPerformed(evt);
            }
        });

        jComboBoxThreshold.setToolTipText("");
        jComboBoxThreshold.setEnabled(false);
        jComboBoxThreshold.setPreferredSize(new java.awt.Dimension(0, 0));
        jComboBoxThreshold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThresholdActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.getAccessibleContext().setAccessibleParent(jPanel3);

        jButtonExample.setText("Example");
        jButtonExample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExampleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jButtonOutput, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jOutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jButtonModel, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jModelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jComboBoxJavaver, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jButtonTest, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jTestTextField))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxPaste)
                    .addComponent(jButtonExample))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jCheckBoxPaste)
                        .addGap(26, 26, 26)
                        .addComponent(jButtonExample)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonTest)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTestTextField)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jModelTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxJavaver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonModel))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOutput)
                    .addComponent(jOutputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21))
        );

        jLabel2.setText("Status Message");

        jTextFieldStatus.setEditable(false);
        jTextFieldStatus.setBackground(new java.awt.Color(204, 204, 255));
        jTextFieldStatus.setBorder(null);

        jPanel14.setBackground(new java.awt.Color(204, 204, 255));
        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Physico-Chemical Properties"));
        jPanel14.setToolTipText("Select Physicochemical Properties");

        jCheckBoxHydroPhob.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxHydroPhob.setText("Hydrophobicity");
        jCheckBoxHydroPhob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHydroPhobActionPerformed(evt);
            }
        });

        jCheckBoxStericHind.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxStericHind.setSelected(true);
        jCheckBoxStericHind.setText("Steric hinderance");

        jCheckBoxcharge.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxcharge.setText("Charge");

        jCheckBoxNetHydrogen.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxNetHydrogen.setSelected(true);
        jCheckBoxNetHydrogen.setText("Net Hydrogen");

        jCheckBoxMW.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxMW.setSelected(true);
        jCheckBoxMW.setText("Molecular weight");

        jCheckBoxhydroPathicity.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydroPathicity.setText("Hydropathicity");

        jCheckBoxSideBulk.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxSideBulk.setText("Solvation");
        jCheckBoxSideBulk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSideBulkActionPerformed(evt);
            }
        });

        jCheckBoxpI.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxpI.setText("pI");

        jCheckBoxamphiPathicity.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxamphiPathicity.setText("Amphipathicity");

        jCheckBoxhydrophilicity.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydrophilicity.setText("Hydrophilicity");

        jCheckBoxAllProp.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxAllProp.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxAllProp.setText("All");
        jCheckBoxAllProp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllPropActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxHydroPhob)
                    .addComponent(jCheckBoxNetHydrogen))
                .addGap(27, 27, 27)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxcharge)
                    .addComponent(jCheckBoxStericHind))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxSideBulk)
                    .addComponent(jCheckBoxpI))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxhydroPathicity)
                    .addComponent(jCheckBoxhydrophilicity))
                .addGap(18, 18, 18)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxamphiPathicity)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jCheckBoxMW)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBoxAllProp)))
                .addGap(28, 28, 28))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxHydroPhob)
                    .addComponent(jCheckBoxStericHind)
                    .addComponent(jCheckBoxhydroPathicity)
                    .addComponent(jCheckBoxamphiPathicity)
                    .addComponent(jCheckBoxSideBulk))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNetHydrogen)
                    .addComponent(jCheckBoxcharge)
                    .addComponent(jCheckBoxpI)
                    .addComponent(jCheckBoxMW)
                    .addComponent(jCheckBoxhydrophilicity)
                    .addComponent(jCheckBoxAllProp))
                .addGap(17, 17, 17))
        );

        jCheckBoxReset.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxReset.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxReset.setText("Reset");
        jCheckBoxReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(166, 332, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButtonPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188)
                                .addComponent(jCheckBoxReset, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 372, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPredict, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxReset))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );

        jTabbedPane2.addTab("Virtual Screening", jPanel1);

        jPanel10.setBackground(new java.awt.Color(204, 204, 255));
        jPanel10.setBorder(new javax.swing.border.MatteBorder(null));

        jPanel12.setBackground(new java.awt.Color(204, 204, 255));
        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "SVM Inputs"));

        jButtonTest2.setText("TestFile");
        jButtonTest2.setToolTipText("Select a test file for prediction");
        jButtonTest2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTest2ActionPerformed(evt);
            }
        });

        jTestTextField2.setEditable(false);
        jTestTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTestTextField2ActionPerformed(evt);
            }
        });

        jButtonModel2.setText("ModelFile");
        jButtonModel2.setToolTipText("Select a Model File");
        jButtonModel2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonModel2ActionPerformed(evt);
            }
        });

        jModelTextField2.setEditable(false);
        jModelTextField2.setToolTipText("Name of Model File");
        jModelTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModelTextField2ActionPerformed(evt);
            }
        });

        jButtonOutput2.setText("OutputFile");
        jButtonOutput2.setToolTipText("Select an output file where to save");
        jButtonOutput2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOutput2ActionPerformed(evt);
            }
        });

        jOutputTextField2.setEditable(false);
        jOutputTextField2.setToolTipText("Name of Output File");
        jOutputTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputTextField2ActionPerformed(evt);
            }
        });

        jCheckBoxPaste2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxPaste2.setText("Paste/Write Test file ");
        jCheckBoxPaste2.setToolTipText("Check if you want to paste or write test file yourself");
        jCheckBoxPaste2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPaste2ActionPerformed(evt);
            }
        });

        jComboBoxJavaver2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Automatic", "SvmLight 5.0", "SvmLight 6.01", "SvmLight 6.02", "LIBsvm" }));
        jComboBoxJavaver2.setToolTipText("Choose if you want to automatically detect model file or want to indicate ");
        jComboBoxJavaver2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxJavaver2ActionPerformed(evt);
            }
        });

        jComboBoxThreshold2.setToolTipText("Choose a threshold");
        jComboBoxThreshold2.setEnabled(false);
        jComboBoxThreshold2.setPreferredSize(new java.awt.Dimension(0, 0));
        jComboBoxThreshold2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxThreshold2ActionPerformed(evt);
            }
        });

        jTextField2.setEditable(false);

        jComboBoxWindowsz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxWindowszActionPerformed(evt);
            }
        });

        jLabel7.setText("Window Size");

        jButtonExample2.setText("Example");
        jButtonExample2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExample2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jButtonOutput2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jOutputTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxThreshold2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jButtonTest2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTestTextField2))
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addComponent(jButtonModel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jModelTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxJavaver2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 145, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jComboBoxWindowsz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(jCheckBoxPaste2)
                    .addComponent(jButtonExample2))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxPaste2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxWindowsz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonTest2)
                            .addComponent(jTestTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonModel2)
                            .addComponent(jModelTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxJavaver2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButtonExample2)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOutput2)
                    .addComponent(jOutputTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxThreshold2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 23, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("HemoPI Software(Protein Map)");

        jButtonPredict2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonPredict2.setText("Predict");
        jButtonPredict2.setToolTipText("Predict the output");
        jButtonPredict2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPredict2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Status Message");

        jTextFieldStatus2.setEditable(false);
        jTextFieldStatus2.setBackground(new java.awt.Color(204, 204, 255));
        jTextFieldStatus2.setBorder(null);
        jTextFieldStatus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldStatus2ActionPerformed(evt);
            }
        });

        jPanel15.setBackground(new java.awt.Color(204, 204, 255));
        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Physico-Chemical Properties"));
        jPanel15.setToolTipText("Select Physicochemical Properties");

        jCheckBoxHydroPhob2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxHydroPhob2.setText("Hydrophobicity");
        jCheckBoxHydroPhob2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxHydroPhob2ActionPerformed(evt);
            }
        });

        jCheckBoxStericHind2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxStericHind2.setSelected(true);
        jCheckBoxStericHind2.setText("Steric hinderance");

        jCheckBoxcharge2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxcharge2.setText("Charge");

        jCheckBoxNetHydrogen2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxNetHydrogen2.setSelected(true);
        jCheckBoxNetHydrogen2.setText("Net Hydrogen");

        jCheckBoxMW2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxMW2.setSelected(true);
        jCheckBoxMW2.setText("Molecular weight");

        jCheckBoxhydroPathicity2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydroPathicity2.setText("Hydropathicity");

        jCheckBoxSideBulk2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxSideBulk2.setText("Solvation");
        jCheckBoxSideBulk2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSideBulk2ActionPerformed(evt);
            }
        });

        jCheckBoxpI2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxpI2.setText("pI");

        jCheckBoxamphiPathicity2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxamphiPathicity2.setText("Amphipathicity");

        jCheckBoxhydrophilicity2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxhydrophilicity2.setText("Hydrophilicity");

        jCheckBoxAllProp2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxAllProp2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxAllProp2.setText("All");
        jCheckBoxAllProp2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAllProp2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxHydroPhob2)
                    .addComponent(jCheckBoxNetHydrogen2))
                .addGap(27, 27, 27)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxcharge2)
                    .addComponent(jCheckBoxStericHind2))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxSideBulk2)
                    .addComponent(jCheckBoxpI2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxhydroPathicity2)
                    .addComponent(jCheckBoxhydrophilicity2))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jCheckBoxamphiPathicity2)
                        .addGap(53, 53, 53))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jCheckBoxMW2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(jCheckBoxAllProp2)
                        .addContainerGap())))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxHydroPhob2)
                    .addComponent(jCheckBoxStericHind2)
                    .addComponent(jCheckBoxhydroPathicity2)
                    .addComponent(jCheckBoxamphiPathicity2)
                    .addComponent(jCheckBoxSideBulk2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxNetHydrogen2)
                    .addComponent(jCheckBoxcharge2)
                    .addComponent(jCheckBoxpI2)
                    .addComponent(jCheckBoxMW2)
                    .addComponent(jCheckBoxhydrophilicity2)
                    .addComponent(jCheckBoxAllProp2))
                .addGap(17, 17, 17))
        );

        jCheckBoxReset2.setBackground(new java.awt.Color(204, 204, 255));
        jCheckBoxReset2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxReset2.setText("Reset");
        jCheckBoxReset2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxReset2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jButtonPredict2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(211, 211, 211)
                                .addComponent(jCheckBoxReset2))
                            .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel6)
                        .addGap(34, 34, 34)
                        .addComponent(jTextFieldStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel5)))
                .addContainerGap(54, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPredict2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxReset2))
                .addGap(36, 36, 36)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldStatus2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Protein Mapping", jPanel10);

        jTextArea4.setEditable(false);
        jTextArea4.setBackground(new java.awt.Color(204, 204, 255));
        jTextArea4.setColumns(20);
        jTextArea4.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jTextArea4.setRows(5);
        jTextArea4.setText("Software developed by:\nRitesh Kumar*, Kumardeep Chaudhary^, Sandeep Singh^, Abhishek Tuknait^, \nAnkur Gautam^, Deepika Mathur^,Priya Anand^, Girish C. Varshney^ and\nGPS Raghava^.\n^ - CSIR-IMTECH, Chandigarh-160036, INDIA.\n*- CSIR-CSIO, Chandigarh-160030, INDIA.\n");
        jScrollPane4.setViewportView(jTextArea4);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 694, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 592, Short.MAX_VALUE)
        );

        jTabbedPane2.addTab("Team", jPanel11);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 620, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1MouseClicked

    private void jComboBoxThresholdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThresholdActionPerformed
        // TODO add your handling code here:
        if (pred == null) {
            return;
        }

        if (jCheckBoxReset.isSelected()) {
            return;
        }
        jButtonPredictActionPerformed(evt);
    }//GEN-LAST:event_jComboBoxThresholdActionPerformed

    private void jComboBoxJavaverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxJavaverActionPerformed
        // TODO add your handling code here:
        String version = (String) jComboBoxJavaver.getSelectedItem();
    }//GEN-LAST:event_jComboBoxJavaverActionPerformed

    private void jCheckBoxPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPasteActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxPaste.isSelected()) {
            jButtonTest.setEnabled(false);
            jTextArea1.setEditable(true);
            jTextArea1.setText(null);
            jTestTextField.setEnabled(false);

        } else {
            jButtonTest.setEnabled(true);
            jTextArea1.setText(null);
            jTextArea1.setEditable(false);

            jTestTextField.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxPasteActionPerformed

    private void jOutputTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jOutputTextFieldActionPerformed

    private void jButtonOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutputActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        //save file here
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            jOutputTextField.setText(filename);
            jTextFieldStatus.setText("outputfile:  " + f.getName());
        } else {
            jTextFieldStatus.setText("Canncelled by user ");
        }
    }//GEN-LAST:event_jButtonOutputActionPerformed

    private void jModelTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModelTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jModelTextFieldActionPerformed

    private void jButtonModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModelActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();

            String filename = f.getAbsolutePath();
            jModelTextField.setText(filename);
            //System.out.println("Testing...");
            jTextFieldStatus.setText("Modelfile.... " + f.getName());

        } else {
            jTextFieldStatus.setText("Canncelled by user ");
        }
    }//GEN-LAST:event_jButtonModelActionPerformed

    private void jButtonTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            // open file and do some SVM

            String filename = f.getAbsolutePath();
            jTestTextField.setText(filename);

            //System.out.println("Loaded.");
            jTextFieldStatus.setText("Loaded file: " + f.getName());
            //jTextArea1.append("Loaded file: " + f.getName()
            //            + "\n");
        } else {
            jTextFieldStatus.setText("Canncelled by user ");
        }
    }//GEN-LAST:event_jButtonTestActionPerformed
    public ArrayList<String> getSetcheckboxesNames(ArrayList<JCheckBox> Checkboxes) {

        ArrayList<String> setCheckboxes;
        // find which checkboxes have been set
        setCheckboxes = new ArrayList<>();
        for (JCheckBox chb : Checkboxes) {
            if (chb.isSelected()) {
                setCheckboxes.add(chb.getText());

            }
        }

        return setCheckboxes;
    }

    /**
     *
     * @param peptides
     * @param pos
     * @param SelectedItem
     * @param modelfilename
     * @param version
     * @param th
     * @param stCheckboxes
     * @return Table object
     */
    public JTable createRecursiveTable(final ArrayList<String> peptides, final ArrayList<Integer> pos,
            String SelectedItem, final String modelfilename, final String version,
            final double th, final ArrayList<String> stCheckboxes) {
        //Mutant mut = new Mutant(SelectedItem);
        //mutaGenesis(SelectedItem);

        String autfilename = "mutants.tst";
        String[] columnNames = {"Sequence",
            "Prob Score",
            /*"Threshold",
             "Class",*/
            "Position"
        };
        final JTable tbl = new JTable();
        int length = columnNames.length + stCheckboxes.size();
        String columns[] = new String[length];
        System.arraycopy(columnNames, 0, columns, 0, columnNames.length);
        int k = columnNames.length;
        for (String chName : stCheckboxes) {
            columns[k] = chName;
            k = k + 1;
        }

        DefaultTableModel dtm = new DefaultTableModel(columns, 0) {

            @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false
                return false;
            }
        };
        tbl.setModel(dtm);
        ListSelectionModel rowSM = tbl.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (e.getValueIsAdjusting()) {
                    return;
                }

                ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                int selectedRow = lsm.getMinSelectionIndex();
                    //int selectedColumn = lsm.

                //JTable tb = (JTable) e.getSource();
                String selectedId = (String) tbl.getValueAt(selectedRow, 0);
                System.out.println(selectedId);
                Mutant mut = new Mutant(selectedId);
                createRecursiveTable(peptides, pos, selectedId, modelfilename, version, th, stCheckboxes);
            }

        });
        tbl.setAutoCreateRowSorter(true);

        JFrame frame = new JFrame();
        frame.setLayout(new BorderLayout());
        pcCalculator pcCalc = new pcCalculator();
        File file = new File(autfilename);

        // if file doesnt exists, then create it
        if (!file.exists()) {
            try {
                file.createNewFile();
            } catch (IOException ex) {
                Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        FileWriter fw = null;
        try {
            fw = new FileWriter(file.getAbsoluteFile());
        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        try (BufferedWriter bw = new BufferedWriter(fw)) {
            for (String peptide : peptides) {
                System.out.println("Number = " + peptide);
                bw.write(peptide + "\r\n");
            }

        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        s = new SVM();

        // Test Problem input
        test = new Problem();
        try {
            test.loadBinaryProblem(autfilename);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Problem with file:" + autfilename, "Error", JOptionPane.ERROR_MESSAGE);
        } catch (ParseException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Problem with file:" + autfilename, "Error", JOptionPane.ERROR_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            pred = s.svmTest(test, modelfilename, version);
        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        String predcl;
        double physicalProps[] = new double[stCheckboxes.size()];
        int rowcount = 0;
        //df.format(k);
        for (int i = 0; i < pred.length; i++) {
            System.out.println(pred[i]);

            pred[i] = ((pred[i] < -1.5) ? -1.5 : pred[i]);
            pred[i] = ((pred[i] > 1.5) ? 1.5 : pred[i]);
            pred[i] = (pred[i] + 1.5) / 3.0;
            predcl = ((pred[i] >= th) ? "Hemolytic" : "Non-Hemolytic");
            dtm.addRow(new Object[]{peptides.get(i), pred[i], /* th, predcl, */ pos.get(i)});
            physicalProps = pcCalc.getPhysicalProperties(peptides.get(i), stCheckboxes);

            int columncount;

            for (columncount = 0; columncount < physicalProps.length; columncount++) {
                dtm.setValueAt(physicalProps[columncount], rowcount, columncount + columnNames.length);
            }

            rowcount = rowcount + 1;

        }
        tbl.getColumnModel().getColumn(1).setCellRenderer(new DecimalFormatRenderer());
        for (int i = 0; i < stCheckboxes.size(); i++) {
            tbl.getColumnModel().getColumn(i + columnNames.length).setCellRenderer(new DecimalFormatRenderer());
        }
        frame.add(new JScrollPane(tbl));
        frame.pack();
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        for (String chld : peptides) {
            System.out.println("Number = " + chld);
        }
        for (Integer posi : pos) {
            System.out.println("Position = " + posi);
        }
        return tbl;
    }

    public int callSVMbringWindow(final String modelfilename, String testfile,
            final String version, final double th, String outputfile,
            final ArrayList<String> stCheckboxes) {

        DecimalFormat df = new DecimalFormat("#.00");
        try {

            String[] columnNames = {"Sequence",
                "Prob Score"/*,
                "Threshold",
                "Class"*/
            };
            int length = columnNames.length + stCheckboxes.size();
            String columns[] = new String[length];
            System.arraycopy(columnNames, 0, columns, 0, columnNames.length);
            int k = columnNames.length;
            for (String chName : stCheckboxes) {
                columns[k] = chName;
                k = k + 1;
            }
            final JTable tbl = new JTable();
            DefaultTableModel dtm = new DefaultTableModel(columns, 0) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    //all cells false
                    return false;
                }
            };
            tbl.setModel(dtm);
            ListSelectionModel rowSM = tbl.getSelectionModel();
            rowSM.addListSelectionListener(new ListSelectionListener() {
                @Override
                public void valueChanged(ListSelectionEvent e) {
                    if (e.getValueIsAdjusting()) {
                        return;
                    }

                    ListSelectionModel lsm = (ListSelectionModel) e.getSource();
                    int selectedRow = lsm.getMinSelectionIndex();
                    //int selectedColumn = lsm.

                    //JTable tb = (JTable) e.getSource();
                    String selectedId = (String) tbl.getValueAt(selectedRow, 0);
                    System.out.println(selectedId);
                    Mutant mut = new Mutant(selectedId);
                    createRecursiveTable(mut.allMutants, mut.allPositions, selectedId, modelfilename, version, th, stCheckboxes);
                }

            });
            tbl.setAutoCreateRowSorter(true);

            JFrame frame = new JFrame();
            frame.setLayout(new BorderLayout());
            // object for physical properties 
            pcCalculator pcCalc = new pcCalculator();

            // even if there is no output file given make a default one
            if (outputfile.length() == 0) {
                outputfile = "output" + testfile;
            }
            if (modelfilename.length() == 0) {
                JOptionPane.showMessageDialog(null, "Model File should not be empty", "Error", JOptionPane.ERROR_MESSAGE);
                return 0;
            } else if (jCheckBoxPaste.isSelected()) {
                testfile = jTextArea1.getText();
                if (testfile.length() == 0) {
                    JOptionPane.showMessageDialog(null, "Please put some test file information in the text area or uncheck the paste checkbox", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {

                        String lines[] = testfile.split("\\r?\\n");
                        String autfilename = "testfileTextArea.tst";
                        File file = new File(autfilename);

                        // if file doesnt exists, then create it
                        if (!file.exists()) {
                            file.createNewFile();
                        }

                        FileWriter fw = new FileWriter(file.getAbsoluteFile());
                        try (BufferedWriter bw = new BufferedWriter(fw)) {
                            bw.write(testfile);
                        }
                        s = new SVM();

                        // Test Problem input
                        test = new Problem();
                        try {
                            test.loadBinaryProblem(autfilename);
                        } catch (IllegalArgumentException e) {
                            JOptionPane.showMessageDialog(null, "Problem with file:" + autfilename, "Error", JOptionPane.ERROR_MESSAGE);
                            return 0;
                        } catch (ParseException ex) {
                            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(null, "Problem with file:" + autfilename, "Error", JOptionPane.ERROR_MESSAGE);
                            return 0;
                        }

                        pred = s.svmTest(test, modelfilename, version);
                        double physicalProps[] = new double[stCheckboxes.size()];
                        int rowcount = 0;
                        //jTextArea1.append("\n*************************************TEST FILE INFO***********************************\n\n");
                        for (int i = 0; i < pred.length; i++) {
                            System.out.println(pred[i]);

                            pred[i] = ((pred[i] < -1.5) ? -1.5 : pred[i]);
                            pred[i] = ((pred[i] > 1.5) ? 1.5 : pred[i]);
                            pred[i] = (pred[i] + 1.5) / 3.0;

                            df.format(pred[i]);
                            String predcl = (pred[i] >= th) ? "Hemolytic" : "Non-Hemolytic";

                            // jTextArea1.append("Predicted: " + pred[i] + "at threshold  " + th + "class: " + predcl + "\n");
                            physicalProps = pcCalc.getPhysicalProperties(lines[i], stCheckboxes);

                            dtm.addRow(new Object[]{lines[i], pred[i] /* , th, predcl*/});
                            int columncount;
                            for (columncount = 0; columncount < physicalProps.length; columncount++) {
                                dtm.setValueAt(physicalProps[columncount], rowcount, columncount + columnNames.length);
                            }

                            rowcount = rowcount + 1;

                        }

                        tbl.getColumnModel().getColumn(1).setCellRenderer(new DecimalFormatRenderer());
                        for (int i = 0; i < stCheckboxes.size(); i++) {
                            tbl.getColumnModel().getColumn(i + columnNames.length).setCellRenderer(new DecimalFormatRenderer());
                        }
                        frame.add(new JScrollPane(tbl));
                        frame.pack();
                        frame.setLocationRelativeTo(null);
                        frame.setVisible(true);

                        // Calculate accuracy of the results
                        // EvalMeasures e = new EvalMeasures(test, pred, 2);
                        // System.out.println("Accuracy=" + e.Accuracy());
                        try {
                            writeOutputfile(outputfile, tbl);
                        } catch (IOException e) {
                            JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);
                            return 0;
                        }

                        System.out.println("Done.");
                        //jTextFieldStatus.setText("done");

                    } catch (IOException e) {
                        return 0;

                    }

                }

            } else {
                // get test file name and get model file name

                s = new SVM();

                // Test Problem input
                test = new Problem();
                try {
                    test.loadBinaryProblem(testfile);
                } catch (IOException | NumberFormatException | ParseException en) {
                    Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, en);
                    JOptionPane.showMessageDialog(null, "Problem with file:" + testfile, "Error", JOptionPane.ERROR_MESSAGE);
                    return 0;
                }
                pred = s.svmTest(test, modelfilename, version);

                BufferedReader bi = new BufferedReader(new FileReader(testfile));
                String line;
                double physicalProps[] = new double[stCheckboxes.size()];
                int rowcount = 0;
                for (int i = 0; i < pred.length; i++) {
                    System.out.println(pred[i]);

                    line = bi.readLine();

                    pred[i] = ((pred[i] < -1.5) ? -1.5 : pred[i]);
                    pred[i] = ((pred[i] > 1.5) ? 1.5 : pred[i]);
                    pred[i] = (pred[i] + 1.5) / 3.0;

                    df.format(pred[i]);
                    String predcl = (pred[i] >= th) ? "Hemolytic" : "Non-Hemolytic";
                    physicalProps = pcCalc.getPhysicalProperties(line, stCheckboxes);
                    dtm.addRow(new Object[]{line, pred[i]/*, th, predcl*/});
                    int columncount;
                    for (columncount = 0; columncount < physicalProps.length; columncount++) {
                        dtm.setValueAt(physicalProps[columncount], rowcount, columncount + columnNames.length);
                    }

                    rowcount = rowcount + 1;
                }
                tbl.getColumnModel().getColumn(1).setCellRenderer(new DecimalFormatRenderer());
                for (int i = 0; i < stCheckboxes.size(); i++) {
                    tbl.getColumnModel().getColumn(i + columnNames.length).setCellRenderer(new DecimalFormatRenderer());
                }

                frame.add(new JScrollPane(tbl));
                frame.pack();
                frame.setLocationRelativeTo(null);
                frame.setVisible(true);
                // Calculate accuracy of the results
                // EvalMeasures e = new EvalMeasures(test, pred, 2);
                // System.out.println("Accuracy=" + e.Accuracy());

                try {
                    writeOutputfile(outputfile, tbl);
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);
                    return 0;
                }
                System.out.println("Done.");

            }

        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
            return 0;
        }
        return 1;
    }

    public void writeOutputfile(String filename, JTable table) throws IOException {
        File opfile = new File(filename);

        // if file doesnt exists, then create it
        if (!opfile.exists()) {
            opfile.createNewFile();
        }

        FileWriter opfw = new FileWriter(opfile.getAbsoluteFile());
        try (BufferedWriter bfw = new BufferedWriter(opfw)) {
            for (int i = 0; i < table.getColumnCount(); i++) {
                bfw.write(table.getColumnName(i));
                bfw.write("\t");
            }

            for (int i = 0; i < table.getRowCount(); i++) {
                bfw.newLine();
                for (int j = 0; j < table.getColumnCount(); j++) {

                    bfw.write((String) ("" + table.getValueAt(i, j)));
                    bfw.write("\t");
                }
            }
        }
    }


    private void jButtonPredictActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredictActionPerformed

        // TODO add your handling code here:
        //jTextArea1.setText(null);
        final String modelfilename = jModelTextField.getText();
        String testfile = jTestTextField.getText();
        final String version = (String) jComboBoxJavaver.getSelectedItem(); // get which model version the user has entered
        String thresl = (String) jComboBoxThreshold.getSelectedItem(); // get selected threshold
        String[] threshold = thresl.split(" ");
        int predcl;
        final double th = Double.parseDouble(threshold[0]);
        String outputfile = jOutputTextField.getText();// get the output file
        ArrayList<String> stChboxes = new ArrayList();
        stChboxes = getSetcheckboxesNames(checkboxes);
        int rterror = callSVMbringWindow(modelfilename, testfile, version, th, outputfile, stChboxes);
        if (rterror != 0) {
            jTextFieldStatus.setText("done");
        } else {
            // do nothing right now
            jTextFieldStatus.setText("error!!");
        }
    }//GEN-LAST:event_jButtonPredictActionPerformed

    private void jCheckBoxResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxResetActionPerformed
        // TODO add your handling code here:
        // reset everything with this button
        if (jCheckBoxReset.isSelected()) {
            if (jCheckBoxPaste.isSelected()) {
                jCheckBoxPaste.setSelected(false);
                jTextArea1.setEditable(false);
                jTextArea1.setText(null);
                jButtonTest.setEnabled(true);
                jTestTextField.setText("Test");
                jTestTextField.setEnabled(true);
                jTestTextField.setEditable(false);
            }

            jModelTextField.setText(null);
            jComboBoxJavaver.setSelectedIndex(0);
            jTestTextField.setText("Test");
            jComboBoxThreshold.setSelectedItem("0.0 (Threshold)");
            jTestTextField.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));
            jOutputTextField.setText("OutputFile");

            for (JCheckBox checkboxe : checkboxes) {
                checkboxe.setSelected(false);
            }
            jCheckBoxStericHind.setSelected(true);
            jCheckBoxNetHydrogen.setSelected(true);
            jCheckBoxMW.setSelected(true);
            jCheckBoxAllProp.setSelected(false);

            //jCheckBoxReset.setSelected(false);
        } else {

        }

    }//GEN-LAST:event_jCheckBoxResetActionPerformed

    private void jButtonPredict1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredict1ActionPerformed
        // TODO add your handling code here:

        final String modelfilename = jModelTextField1.getText();
        String testfile = jTestTextField1.getText();
        final String version = (String) jComboBoxJavaver1.getSelectedItem(); // get which model version the user has entered

        ArrayList<String> stChboxes = new ArrayList();
        stChboxes = getSetcheckboxesNames(checkboxes1);
        String thresl = (String) jComboBoxThreshold1.getSelectedItem(); // get selected threshold
        String[] threshold = thresl.split(" ");

        final double th = Double.parseDouble(threshold[0]);
        String outputfile = jOutputTextField1.getText();// get the output file
        JTable tbl = new JTable();
        if (outputfile.length() == 0) {
            outputfile = "output" + testfile;
        }
        if (modelfilename.length() == 0) {
            JOptionPane.showMessageDialog(null, "Model File should not be empty", "Error", JOptionPane.ERROR_MESSAGE);

        } else if (jCheckBoxPaste1.isSelected()) {
            testfile = jTextField1.getText();
            Mutant mut = new Mutant(testfile);
            if (testfile.length() == 0) {
                JOptionPane.showMessageDialog(null, "Please put some test file information in the text field or uncheck the paste checkbox", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                tbl = createRecursiveTable(mut.allMutants, mut.allPositions,
                        testfile, modelfilename, version, th, stChboxes);

            }
            try {
                writeOutputfile(outputfile, tbl);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);

            }

            System.out.println("Done.");

            jTextFieldStatus1.setText("done");
    }//GEN-LAST:event_jButtonPredict1ActionPerformed
        else {
            // get test file name and get model file name

            BufferedReader bi;
            try {
                bi = new BufferedReader(new FileReader(testfile));

                String line;

                line = bi.readLine();
                Mutant mut = new Mutant(line);

                tbl = createRecursiveTable(mut.allMutants, mut.allPositions, line,
                        modelfilename, version, th, stChboxes);
            } catch (IOException ex) {
                Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Calculate accuracy of the results
            // EvalMeasures e = new EvalMeasures(test, pred, 2);
            // System.out.println("Accuracy=" + e.Accuracy());
            try {
                writeOutputfile(outputfile, tbl);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);

            }
            System.out.println("Done.");
            jTextFieldStatus1.setText("done");
        }
    }
    private void jCheckBoxReset1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxReset1ActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxReset1.isSelected()) {
            if (jCheckBoxPaste1.isSelected()) {
                jCheckBoxPaste1.setSelected(false);
                jTextField1.setEditable(false);
                jTextField1.setText(null);
                jButtonTest1.setEnabled(true);
                jTestTextField1.setText("Test");
                jTestTextField1.setEnabled(true);
                jTestTextField1.setEditable(true);
            }

            jModelTextField1.setText(null);
            jComboBoxJavaver1.setSelectedIndex(0);
            jComboBoxThreshold1.setSelectedItem("0.0 (Threshold)");
            jOutputTextField1.setText("OutputFile");
            jTestTextField1.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));
            //jTestTextField1.setText("Input your test file here");
            jOutputTextField.setText("OutputFile");

            for (JCheckBox checkboxes11 : checkboxes1) {
                checkboxes11.setSelected(false);
            }
            jCheckBoxStericHind1.setSelected(true);
            jCheckBoxNetHydrogen1.setSelected(true);
            jCheckBoxMW1.setSelected(true);
            jCheckBoxAllProp1.setSelected(false);
        } else {

        }

    }//GEN-LAST:event_jCheckBoxReset1ActionPerformed

    private void jButtonTest1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTest1ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            // open file and do some SVM

            String filename = f.getAbsolutePath();
            jTestTextField1.setText(filename);

            //System.out.println("Loaded.");
            jTextFieldStatus1.setText("Loaded file: " + f.getName());
            //jTextArea1.append("Loaded file: " + f.getName()
            //            + "\n");
        } else {
            jTextFieldStatus1.setText("Canncelled by user ");
        }
    }//GEN-LAST:event_jButtonTest1ActionPerformed

    private void jButtonModel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModel1ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();

            String filename = f.getAbsolutePath();
            jModelTextField1.setText(filename);
            //System.out.println("Testing...");
            jTextFieldStatus1.setText("Modelfile.... " + f.getName());

        } else {
            jTextFieldStatus1.setText("Canncelled by user ");
        }
    }//GEN-LAST:event_jButtonModel1ActionPerformed

    private void jModelTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModelTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jModelTextField1ActionPerformed

    private void jButtonOutput1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutput1ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        //save file here
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            jOutputTextField1.setText(filename);
            jTextFieldStatus1.setText("outputfile:  " + f.getName());
        } else {
            jTextFieldStatus1.setText("Canncelled by user ");
        }

    }//GEN-LAST:event_jButtonOutput1ActionPerformed

    private void jOutputTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jOutputTextField1ActionPerformed

    private void jComboBoxJavaver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxJavaver1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxJavaver1ActionPerformed

    private void jComboBoxThreshold1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThreshold1ActionPerformed
        // TODO add your handling code here:
        if (pred == null) {
            return;
        }

        if (jCheckBoxReset1.isSelected()) {
            return;
        }
        jButtonPredict1ActionPerformed(evt);
    }//GEN-LAST:event_jComboBoxThreshold1ActionPerformed

    private void jCheckBoxPaste1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPaste1ActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxPaste1.isSelected()) {
            jButtonTest1.setEnabled(false);
            jTextField1.setEditable(true);
            jTextField1.setText(null);
            jTestTextField1.setEnabled(false);

        } else {
            jButtonTest1.setEnabled(true);
            jTextField1.setText(null);
            jTextField1.setEditable(false);

            jTestTextField1.setEnabled(true);
        }
    }//GEN-LAST:event_jCheckBoxPaste1ActionPerformed

    private void jTextFieldStatus1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStatus1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStatus1ActionPerformed

    private void jTestTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTestTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTestTextFieldActionPerformed

    private void jTestTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTestTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTestTextField1ActionPerformed

    private void jButtonTest2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTest2ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            // open file and do some SVM

            String filename = f.getAbsolutePath();
            jTestTextField2.setText(filename);

            //System.out.println("Loaded.");
            jTextFieldStatus2.setText("Loaded file: " + f.getName());
            //jTextArea1.append("Loaded file: " + f.getName()
            //            + "\n");
        } else {
            jTextFieldStatus2.setText("Canncelled by user ");
        }

    }//GEN-LAST:event_jButtonTest2ActionPerformed

    private void jTestTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTestTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTestTextField2ActionPerformed

    private void jButtonModel2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonModel2ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();

            String filename = f.getAbsolutePath();
            jModelTextField2.setText(filename);
            //System.out.println("Testing...");
            jTextFieldStatus2.setText("Modelfile.... " + f.getName());

        } else {
            jTextFieldStatus2.setText("Canncelled by user ");
        }


    }//GEN-LAST:event_jButtonModel2ActionPerformed

    private void jModelTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModelTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jModelTextField2ActionPerformed

    private void jButtonOutput2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOutput2ActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(null);
        //save file here
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            String filename = f.getAbsolutePath();
            jOutputTextField2.setText(filename);
            jTextFieldStatus2.setText("outputfile:  " + f.getName());
        } else {
            jTextFieldStatus2.setText("Canncelled by user ");
        }


    }//GEN-LAST:event_jButtonOutput2ActionPerformed

    private void jOutputTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jOutputTextField2ActionPerformed

    private void jCheckBoxPaste2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPaste2ActionPerformed
        // TODO add your handling code here:
        if (jCheckBoxPaste2.isSelected()) {
            jButtonTest2.setEnabled(false);
            jTextField2.setEditable(true);
            jTextField2.setText(null);
            jTestTextField2.setEnabled(false);

        } else {
            jButtonTest2.setEnabled(true);
            jTextField2.setText(null);
            jTextField2.setEditable(false);

            jTestTextField2.setEnabled(true);
        }


    }//GEN-LAST:event_jCheckBoxPaste2ActionPerformed

    private void jComboBoxJavaver2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxJavaver2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxJavaver2ActionPerformed

    private void jComboBoxThreshold2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxThreshold2ActionPerformed
        // TODO add your handling code here:
        if (pred == null) {
            return;
        }

        if (jCheckBoxReset2.isSelected()) {
            return;
        }
        jButtonPredict2ActionPerformed(evt);


    }//GEN-LAST:event_jComboBoxThreshold2ActionPerformed

    private void jCheckBoxReset2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxReset2ActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxReset2.isSelected()) {
            if (jCheckBoxPaste2.isSelected()) {
                jCheckBoxPaste2.setSelected(false);
                jTextField2.setEditable(false);
                jTextField2.setText(null);
                jButtonTest2.setEnabled(true);
                jTestTextField2.setText("Test");
                jTestTextField2.setEnabled(true);
                jTestTextField2.setEditable(true);
            }

            jModelTextField2.setText(null);
            jComboBoxJavaver2.setSelectedIndex(0);
            jComboBoxThreshold2.setSelectedItem("0.0 (Threshold)");
            jOutputTextField2.setText("OutputFile");
            //jCheckBoxReset2.setSelected(false);
            jComboBoxWindowsz.setSelectedIndex(0);

            jTestTextField2.setUI(new HintTextFieldUI("Test File", true, new Color(100, 100, 100)));

            for (JCheckBox checkboxes21 : checkboxes2) {
                checkboxes21.setSelected(false);
            }
            jCheckBoxStericHind2.setSelected(true);
            jCheckBoxNetHydrogen2.setSelected(true);
            jCheckBoxMW2.setSelected(true);
            jCheckBoxAllProp2.setSelected(false);

        } else {

        }
    }//GEN-LAST:event_jCheckBoxReset2ActionPerformed

    private void jButtonPredict2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPredict2ActionPerformed

        final String modelfilename = jModelTextField2.getText();
        String testfile = jTestTextField2.getText();
        final String version = (String) jComboBoxJavaver2.getSelectedItem(); // get which model version the user has entered

        ArrayList<String> stChboxes = new ArrayList();
        stChboxes = getSetcheckboxesNames(checkboxes2);

        String thresl = (String) jComboBoxThreshold2.getSelectedItem(); // get selected threshold
        String wndsize = (String) jComboBoxWindowsz.getSelectedItem();// get selected window size
        int wndsz = Integer.parseInt(wndsize); // making default for now
        String[] threshold = thresl.split(" ");

        final double th = Double.parseDouble(threshold[0]);
        String outputfile = jOutputTextField2.getText();// get the output file
        JTable tbl = new JTable();
        if (outputfile.length() == 0) {
            outputfile = "output" + testfile;
        }
        if (modelfilename.length() == 0) {
            JOptionPane.showMessageDialog(null, "Model File should not be empty", "Error", JOptionPane.ERROR_MESSAGE);

        } else if (jCheckBoxPaste2.isSelected()) {
            testfile = jTextField2.getText();
            if (testfile.length() < wndsz) {
                JOptionPane.showMessageDialog(null, "Please select windowsize less than or equal to" + testfile.length(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            SlidingWindow sld = new SlidingWindow(testfile, wndsz);

            if (testfile.length() == 0) {
                JOptionPane.showMessageDialog(null, "Please put some test file information in the text area or uncheck the paste checkbox", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                tbl = createRecursiveTable(sld.allSubstrings, sld.allPositions,
                        testfile, modelfilename, version, th, stChboxes);

            }
            try {
                writeOutputfile(outputfile, tbl);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);

            }

            System.out.println("Done.");

            jTextFieldStatus2.setText("done");
        } else {
            // get test file name and get model file name

            BufferedReader bi;
            try {
                bi = new BufferedReader(new FileReader(testfile));

                String line;

                line = bi.readLine();
                if (line.length() < wndsz) {
                    JOptionPane.showMessageDialog(null, "Please select windowsize less than or equal to" + line.length(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                SlidingWindow sld = new SlidingWindow(line, wndsz);

                tbl = createRecursiveTable(sld.allSubstrings, sld.allPositions, line,
                        modelfilename, version, th, stChboxes);
            } catch (IOException ex) {
                Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
            }

            // Calculate accuracy of the results
            // EvalMeasures e = new EvalMeasures(test, pred, 2);
            // System.out.println("Accuracy=" + e.Accuracy());
            try {
                writeOutputfile(outputfile, tbl);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "Error creating output file: " + outputfile, "Error", JOptionPane.ERROR_MESSAGE);

            }
            System.out.println("Done.");
            jTextFieldStatus2.setText("done");
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jButtonPredict2ActionPerformed

    private void jTextFieldStatus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldStatus2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldStatus2ActionPerformed

    private void jComboBoxWindowszActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxWindowszActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBoxWindowszActionPerformed

    private void jCheckBoxHydroPhob1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHydroPhob1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHydroPhob1ActionPerformed

    private void jCheckBoxSideBulk1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSideBulk1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSideBulk1ActionPerformed

    private void jCheckBoxHydroPhobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHydroPhobActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHydroPhobActionPerformed

    private void jCheckBoxSideBulkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSideBulkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSideBulkActionPerformed

    private void jCheckBoxHydroPhob2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxHydroPhob2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxHydroPhob2ActionPerformed

    private void jCheckBoxSideBulk2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSideBulk2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSideBulk2ActionPerformed

    private void jCheckBoxAllPropActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllPropActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxAllProp.isSelected()) {
            for (int i = 0; i < checkboxes.size(); i++) {
                checkboxes.get(i).setSelected(true);
            }
        }
    }//GEN-LAST:event_jCheckBoxAllPropActionPerformed

    private void jCheckBoxAllProp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllProp1ActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxAllProp1.isSelected()) {
            for (int i = 0; i < checkboxes1.size(); i++) {
                checkboxes1.get(i).setSelected(true);
            }
        }
    }//GEN-LAST:event_jCheckBoxAllProp1ActionPerformed

    private void jCheckBoxAllProp2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAllProp2ActionPerformed
        // TODO add your handling code here:

        if (jCheckBoxAllProp2.isSelected()) {
            for (int i = 0; i < checkboxes2.size(); i++) {
                checkboxes2.get(i).setSelected(true);
            }
        }
    }//GEN-LAST:event_jCheckBoxAllProp2ActionPerformed

    private void jButtonExampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExampleActionPerformed
        // TODO add your handling code here:
        jCheckBoxPaste.setSelected(true);
        BufferedReader br;
        String line;
        try {
            br = new BufferedReader(new FileReader("seq.txt"));
            while ((line = br.readLine()) != null) {
                jTextArea1.append(line + "\n");

            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(JavaSVMPredictUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        jModelTextField.setText("model_D2.txt");
        jOutputTextField.setText("ExampleOutputVirtualScreen.txt");

        //fire predict event
        jButtonPredictActionPerformed(evt);

    }//GEN-LAST:event_jButtonExampleActionPerformed

    private void jButtonExample1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExample1ActionPerformed
        // TODO add your handling code here:
        jCheckBoxPaste1.setSelected(true);

        jTextField1.setText("FCPLGLVKSVVSAL");
        jModelTextField1.setText("model_D2.txt");
        jOutputTextField1.setText("ExampleOutputHemolyticPotency.txt");

        //fire predict event
        jButtonPredict1ActionPerformed(evt);


    }//GEN-LAST:event_jButtonExample1ActionPerformed

    private void jButtonExample2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExample2ActionPerformed
        // TODO add your handling code here:

        jCheckBoxPaste2.setSelected(true);

        jTextField2.setText("FCPLGLVKSVVSAL");
        jModelTextField2.setText("model_D2.txt");
        jOutputTextField2.setText("ExampleOutputProteinMap.txt");

        //fire predict event
        jButtonPredict2ActionPerformed(evt);

    }//GEN-LAST:event_jButtonExample2ActionPerformed

    @Override
    public synchronized void addMouseListener(MouseListener l) {
        super.addMouseListener(l); //To change body of generated methods, choose Tools | Templates.
    }

    private void comboBoxsetThresholdValues(javax.swing.JComboBox comboBox) {

        ArrayList<String> comboBoxItems = new ArrayList<>();

        //int k = -100;
        double k = 0.0;
        DecimalFormat df = new DecimalFormat("0.#");
        df.setRoundingMode(RoundingMode.CEILING);
        df.format(k);
        while (k < 1) {
            //double k1 = k / 100.0;
            df.format(k);
            //comboBoxItems.add(Double.toString(k));
            comboBoxItems.add(df.format(k));
            k = k + 0.1;

        }

        int index = comboBoxItems.indexOf("0.5");
        String zero = comboBoxItems.get(index);
        String zeroth = zero + " (Threshold)";
        comboBoxItems.set(index, zeroth);
        comboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxItems.toArray()));
        //jComboBoxThreshold1.setModel(new javax.swing.DefaultComboBoxModel(comboBoxItems.toArray()));

        comboBox.setSelectedIndex(index);
        //jComboBoxThreshold1.setSelectedIndex(index);
    }

    private void comboBoxsetWindowSize(javax.swing.JComboBox comboBox) {

        ArrayList<String> comboBoxItems = new ArrayList<>();

        int k = 5;
        //DecimalFormat df = new DecimalFormat("0.0");
        //df.format(k);
        while (k < 31) {

            comboBoxItems.add(Integer.toString(k));
            k = k + 1;
            //df.format(k);

        }

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(comboBoxItems.toArray()));
        //jComboBoxThreshold1.setModel(new javax.swing.DefaultComboBoxModel(comboBoxItems.toArray()));

        comboBox.setSelectedIndex(0);
        //jComboBoxThreshold1.setSelectedIndex(index);
    }

    private void addCheckboxes() {

        checkboxes.add(jCheckBoxMW);
        checkboxes1.add(jCheckBoxMW1);
        checkboxes2.add(jCheckBoxMW2);

        checkboxes.add(jCheckBoxHydroPhob);
        checkboxes1.add(jCheckBoxHydroPhob1);
        checkboxes2.add(jCheckBoxHydroPhob2);

        checkboxes.add(jCheckBoxNetHydrogen);
        checkboxes1.add(jCheckBoxNetHydrogen1);
        checkboxes2.add(jCheckBoxNetHydrogen2);

        checkboxes.add(jCheckBoxSideBulk);
        checkboxes1.add(jCheckBoxSideBulk1);
        checkboxes2.add(jCheckBoxSideBulk2);

        checkboxes.add(jCheckBoxStericHind);
        checkboxes1.add(jCheckBoxStericHind1);
        checkboxes2.add(jCheckBoxStericHind2);

        checkboxes.add(jCheckBoxamphiPathicity);
        checkboxes1.add(jCheckBoxamphiPathicity1);
        checkboxes2.add(jCheckBoxamphiPathicity2);

        checkboxes.add(jCheckBoxcharge);
        checkboxes1.add(jCheckBoxcharge1);
        checkboxes2.add(jCheckBoxcharge2);

        checkboxes.add(jCheckBoxhydroPathicity);
        checkboxes1.add(jCheckBoxhydroPathicity1);
        checkboxes2.add(jCheckBoxhydroPathicity2);

        checkboxes.add(jCheckBoxhydrophilicity);
        checkboxes1.add(jCheckBoxhydrophilicity1);
        checkboxes2.add(jCheckBoxhydrophilicity2);

        checkboxes.add(jCheckBoxpI);
        checkboxes1.add(jCheckBoxpI1);
        checkboxes2.add(jCheckBoxpI2);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JavaSVMPredictUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JavaSVMPredictUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JavaSVMPredictUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JavaSVMPredictUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JavaSVMPredictUI().setVisible(true);
            }
        });
    }

    static class DecimalFormatRenderer extends DefaultTableCellRenderer {

        private static final DecimalFormat formatter = new DecimalFormat("0.00");

        @Override
        public Component getTableCellRendererComponent(
                JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            // First format the cell value as required

            value = formatter.format((Number) value);

                        // And pass it on to parent class 
            return super.getTableCellRendererComponent(
                    table, value, isSelected, hasFocus, row, column);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButtonExample;
    private javax.swing.JButton jButtonExample1;
    private javax.swing.JButton jButtonExample2;
    private javax.swing.JButton jButtonModel;
    private javax.swing.JButton jButtonModel1;
    private javax.swing.JButton jButtonModel2;
    private javax.swing.JButton jButtonOutput;
    private javax.swing.JButton jButtonOutput1;
    private javax.swing.JButton jButtonOutput2;
    private javax.swing.JButton jButtonPredict;
    private javax.swing.JButton jButtonPredict1;
    private javax.swing.JButton jButtonPredict2;
    private javax.swing.JButton jButtonTest;
    private javax.swing.JButton jButtonTest1;
    private javax.swing.JButton jButtonTest2;
    private javax.swing.JCheckBox jCheckBoxAllProp;
    private javax.swing.JCheckBox jCheckBoxAllProp1;
    private javax.swing.JCheckBox jCheckBoxAllProp2;
    private javax.swing.JCheckBox jCheckBoxHydroPhob;
    private javax.swing.JCheckBox jCheckBoxHydroPhob1;
    private javax.swing.JCheckBox jCheckBoxHydroPhob2;
    private javax.swing.JCheckBox jCheckBoxMW;
    private javax.swing.JCheckBox jCheckBoxMW1;
    private javax.swing.JCheckBox jCheckBoxMW2;
    private javax.swing.JCheckBox jCheckBoxNetHydrogen;
    private javax.swing.JCheckBox jCheckBoxNetHydrogen1;
    private javax.swing.JCheckBox jCheckBoxNetHydrogen2;
    private javax.swing.JCheckBox jCheckBoxPaste;
    private javax.swing.JCheckBox jCheckBoxPaste1;
    private javax.swing.JCheckBox jCheckBoxPaste2;
    private javax.swing.JCheckBox jCheckBoxReset;
    private javax.swing.JCheckBox jCheckBoxReset1;
    private javax.swing.JCheckBox jCheckBoxReset2;
    private javax.swing.JCheckBox jCheckBoxSideBulk;
    private javax.swing.JCheckBox jCheckBoxSideBulk1;
    private javax.swing.JCheckBox jCheckBoxSideBulk2;
    private javax.swing.JCheckBox jCheckBoxStericHind;
    private javax.swing.JCheckBox jCheckBoxStericHind1;
    private javax.swing.JCheckBox jCheckBoxStericHind2;
    private javax.swing.JCheckBox jCheckBoxamphiPathicity;
    private javax.swing.JCheckBox jCheckBoxamphiPathicity1;
    private javax.swing.JCheckBox jCheckBoxamphiPathicity2;
    private javax.swing.JCheckBox jCheckBoxcharge;
    private javax.swing.JCheckBox jCheckBoxcharge1;
    private javax.swing.JCheckBox jCheckBoxcharge2;
    private javax.swing.JCheckBox jCheckBoxhydroPathicity;
    private javax.swing.JCheckBox jCheckBoxhydroPathicity1;
    private javax.swing.JCheckBox jCheckBoxhydroPathicity2;
    private javax.swing.JCheckBox jCheckBoxhydrophilicity;
    private javax.swing.JCheckBox jCheckBoxhydrophilicity1;
    private javax.swing.JCheckBox jCheckBoxhydrophilicity2;
    private javax.swing.JCheckBox jCheckBoxpI;
    private javax.swing.JCheckBox jCheckBoxpI1;
    private javax.swing.JCheckBox jCheckBoxpI2;
    private javax.swing.JComboBox jComboBoxJavaver;
    private javax.swing.JComboBox jComboBoxJavaver1;
    private javax.swing.JComboBox jComboBoxJavaver2;
    private javax.swing.JComboBox jComboBoxThreshold;
    private javax.swing.JComboBox jComboBoxThreshold1;
    private javax.swing.JComboBox jComboBoxThreshold2;
    private javax.swing.JComboBox jComboBoxWindowsz;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField jModelTextField;
    private javax.swing.JTextField jModelTextField1;
    private javax.swing.JTextField jModelTextField2;
    private javax.swing.JTextField jOutputTextField;
    private javax.swing.JTextField jOutputTextField1;
    private javax.swing.JTextField jOutputTextField2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTextField jTestTextField;
    private javax.swing.JTextField jTestTextField1;
    private javax.swing.JTextField jTestTextField2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextFieldStatus;
    private javax.swing.JTextField jTextFieldStatus1;
    private javax.swing.JTextField jTextFieldStatus2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

}
